package pl.pcz.wimii.zpi.smartplan.entities;
// Generated 2015-12-07 21:04:58 by Hibernate Tools 4.3.1


import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Zajecia generated by hbm2java
 */
@Entity
@Table(name="zajecia"
    ,catalog="smartplan"
)
public class Zajecia  implements java.io.Serializable, Comparable<Zajecia> {


     private Integer id;
     private Godziny godziny;
     private Plany plany;
     private Przedmioty przedmioty;
     private Zjazdy zjazdy;
     private String prowadzacyNazw;
     private String sala;

    public Zajecia() {
    }

	
    public Zajecia(Godziny godziny, Plany plany, Zjazdy zjazdy) {
        this.godziny = godziny;
        this.plany = plany;
        this.zjazdy = zjazdy;
    }
    public Zajecia(Godziny godziny, Plany plany, Przedmioty przedmioty, Zjazdy zjazdy, String prowadzacyNazw, String sala) {
       this.godziny = godziny;
       this.plany = plany;
       this.przedmioty = przedmioty;
       this.zjazdy = zjazdy;
       this.prowadzacyNazw = prowadzacyNazw;
       this.sala = sala;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="godziny_id", nullable=false)
    public Godziny getGodziny() {
        return this.godziny;
    }
    
    public void setGodziny(Godziny godziny) {
        this.godziny = godziny;
    }

@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="plany_id", nullable=false)
    public Plany getPlany() {
        return this.plany;
    }
    
    public void setPlany(Plany plany) {
        this.plany = plany;
    }

@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="przedmioty_id")
    public Przedmioty getPrzedmioty() {
        return this.przedmioty;
    }
    
    public void setPrzedmioty(Przedmioty przedmioty) {
        this.przedmioty = przedmioty;
    }

@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="zjazdy_id", nullable=false)
    public Zjazdy getZjazdy() {
        return this.zjazdy;
    }
    
    public void setZjazdy(Zjazdy zjazdy) {
        this.zjazdy = zjazdy;
    }

    
    @Column(name="prowadzacy_nazw", length=45)
    public String getProwadzacyNazw() {
        return this.prowadzacyNazw;
    }
    
    public void setProwadzacyNazw(String prowadzacyNazw) {
        this.prowadzacyNazw = prowadzacyNazw;
    }

    
    @Column(name="sala", length=45)
    public String getSala() {
        return this.sala;
    }
    
    public void setSala(String sala) {
        this.sala = sala;
    }

    @Override
    public String toString() {
        return "Zajecia{" + "id=" + id + ", godziny=" + godziny + ", plany=" + plany + ", przedmioty=" + przedmioty + ", zjazdy=" + zjazdy + ", prowadzacyNazw=" + prowadzacyNazw + ", sala=" + sala + '}';
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 61 * hash + Objects.hashCode(this.godziny);
        hash = 61 * hash + Objects.hashCode(this.plany);
        hash = 61 * hash + Objects.hashCode(this.przedmioty);
        hash = 61 * hash + Objects.hashCode(this.zjazdy);
        hash = 61 * hash + Objects.hashCode(this.prowadzacyNazw);
        hash = 61 * hash + Objects.hashCode(this.sala);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Zajecia other = (Zajecia) obj;
        if (!Objects.equals(this.prowadzacyNazw, other.prowadzacyNazw)) {
            return false;
        }
        if (!Objects.equals(this.sala, other.sala)) {
            return false;
        }
        if (!Objects.equals(this.godziny, other.godziny)) {
            return false;
        }
        if (!Objects.equals(this.plany, other.plany)) {
            return false;
        }
        if (!Objects.equals(this.przedmioty, other.przedmioty)) {
            return false;
        }
        if (!Objects.equals(this.zjazdy, other.zjazdy)) {
            return false;
        }
        return true;
    }

    @Override
    public int compareTo(Zajecia o) {
        return this.godziny.getId().compareTo(o.getGodziny().getId());
    }

}


